name: build-windows

on:
  push:
    branches: [ "dev" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "dev" ]

jobs:

  build:
    if:  startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
          submodules: true  # This tells checkout action to clone submodules
          token: ${{ secrets.GH_PAT }}  # Personal Access Token with repo scope


    - name: pull
      run: git submodule update --init --recursive

    - name: downloadsdk
      run: |
        Invoke-WebRequest -Uri "https://github.com/SwiftForWindows/SwiftForWindows/releases/download/v2.0/SwiftForWindows-2.0.exe" -OutFile "c:\SwiftForWindows-2.0.exe"
        c:\SwiftForWindows-2.0.exe  /install /passive
      shell: pwsh
    
        
    # - name: Add execute permission
    #   run: chmod +x SwiftForWindows-2.0.exe
    
    # - name: Install Swift for Windows
    #   run: |
    #       Start-Process -FilePath "./SwiftForWindows-2.0.exe" -ArgumentList "/install /passive" -Wait
    #   shell: pwsh



    # - name: Install Winget
    #   run: |
    #     Import-Module Appx  # 显式导入 Appx 模块
    #     Add-AppxPackage -Register -DisableDevelopmentMode "C:\Program Files\WindowsApps\Microsoft.DesktopAppInstaller_*.appxmanifest"
    #     winget install --id Microsoft.VisualStudio.2022.Community --exact --force --custom "--add Microsoft.VisualStudio.Component.Windows11SDK.22000 --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.Tools.ARM64"
    #     winget install --id Swift.Toolchain -e
    #   shell: pwsh


    - name: Build
      run: |
       set SWIFTSYNTAX_BUILD_DYNAMIC_LIBRARY=1
       swift build -Xcc -I%SDKROOT%\usr\include -Xcc -I%SDKROOT%\usr\include\Block  -c release
      
      
    - name: Check if release exists
      id: check_release
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
        if gh release view ${{ github.ref_name }} 2>&1; then
            echo "release_exists=true" >> $env:GITHUB_OUTPUT
        else
            echo "release_exists=false" >> $env:GITHUB_OUTPUT
        fi
        else
        if gh release view ${{ github.ref_name }} &> /dev/null; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
        else
            echo "release_exists=false" >> $GITHUB_OUTPUT
        fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN}}

        
    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.release_exists == 'false' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Get Release Upload URL
      id: get_upload_url
      shell: bash
      run: |
        upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)
        echo $upload_url
        if [[ $upload_url == "" ]]; then 
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        else
            echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
        fi
        # echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        # echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
        # if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            # echo "upload_url=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
        # else
            # echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        # fi
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN }}






    - name: Upload Linux Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RTOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./.build/release/sourcekit-lsp
        asset_name: sourcekit-lsp-amd64-windows
        asset_content_type: application/octet-stream





        
